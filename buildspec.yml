version: 0.2

env:
  variables:
    REGION: us-east-1
    AWS_ACCOUNT_ID: 209561933103
    CLUSTER_NAME: vamsi-cluster
    SERVICE_NAME: vamsi-service
    TASK_DEFINITION_FAMILY: vamsi-task
    CONTAINER_NAME: vamsi-container
    REPOSITORY_URI: public.ecr.aws/i5n8n4i7/vamsi-repo

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR Public...
      - aws --version
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo IMAGE_TAG=$IMAGE_TAG
      - docker pull $REPOSITORY_URI:$IMAGE_TAG

  build:
    commands:
      - echo Writing imagedefinitions.json...
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
      - cat imagedefinitions.json

      - echo Registering ECS task definition...
      - |
        cat <<EOF > taskdef.json
        {
          "family": "$TASK_DEFINITION_FAMILY",
          "networkMode": "awsvpc",
          "executionRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/ecsTaskExecutionRole",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "containerDefinitions": [
            {
              "name": "$CONTAINER_NAME",
              "image": "$REPOSITORY_URI:$IMAGE_TAG",
              "portMappings": [
                {
                  "containerPort": 80,
                  "protocol": "tcp"
                }
              ],
              "essential": true
            }
          ]
        }
        EOF

      - |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://taskdef.json \
          --region $REGION \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

      - echo Getting Subnet and Security Group...
      - SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=vamsi-subnet" --region $REGION --query "Subnets[0].SubnetId" --output text)
      - SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=vamsi-securitygroup" --region $REGION --query "SecurityGroups[0].GroupId" --output text)

      - echo Creating ECS Cluster if it doesn't exist...
      - |
        aws ecs describe-clusters --clusters $CLUSTER_NAME --region $REGION | grep "clusterName" || \
        aws ecs create-cluster --cluster-name $CLUSTER_NAME --region $REGION

      - echo Updating or creating ECS Service...
      - |
        SERVICE_EXISTS=$(aws ecs describe-services \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --region $REGION \
          --query "services[0].status" \
          --output text || echo "MISSING")

        if [ "$SERVICE_EXISTS" = "ACTIVE" ]; then
          echo "Updating ECS Service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEF_ARN \
            --region $REGION
        else
          echo "Creating ECS Service..."
          aws ecs create-service \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --task-definition $TASK_DEF_ARN \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
            --region $REGION
        fi

artifacts:
  files:
    - imagedefinitions.json
